import requests
from bs4 import BeautifulSoup, Comment
import re
import pyfiglet

ascii_banner = pyfiglet.figlet_format("INFORMATION DISCLOSURE VULNERABILITY")
print(ascii_banner)

def check_information_disclosure(target_url):
    try:
        print(f"[*] Checking for Information Disclosure vulnerability on {target_url}...")

        # Send a GET request to the target website with a timeout
        response = requests.get(target_url, timeout=10)

        if response.status_code == 200:
            print("[+] Target website is reachable.")
            soup = BeautifulSoup(response.text, 'html.parser')

            # Keywords indicating sensitive information
            sensitive_keywords = [
                'password', 'username', 'email', 'credit card', 'api key', 'secret',
                'security question', 'social security number', 'phone number', 'address',
                'birthdate', 'passport number', 'bank account', 'access token',
                'private key', 'public key', 'ssh key', 'ftp password', 'admin password',
                'root password', 'database password', 'db_password', 'admin_user',
                'admin_pass', 'auth_token', 'jwt_token', 'session_id', 'cookie',
                'csrf_token', 'xsrf_token', 'aws_access_key_id', 'aws_secret_access_key',
                'encryption_key', 'decryption_key', 'license key', 'api_token', 'jwt_secret',
                'otp_secret', 'pin_number', 'encryption_password', 'secret_key',
                'user_secret', 'database_url', 'db_user', 'db_pass', 'ftp_user',
                'ftp_pass', 'smtp_password', 'smtp_user', 'smtp_pass', 'smtp_secret',
                'mail_password', 'mail_user', 'mail_secret', 'payment_token', 'card_number',
                'expiration_date', 'cvv', 'billing_address', 'zip_code', 'security_code',
                'tax_id', 'license_number', 'driver_license', 'passport_id', 'student_id',
                'employee_id', 'department_code', 'employee_number', 'access_code',
                'routing_number', 'iban', 'swift_code', 'bic', 'account_number',
                'membership_number', 'membership_id', 'reservation_number', 'booking_code',
                'ticket_number', 'flight_number', 'seat_number', 'hotel_booking_code',
                'reservation_code', 'customer_id', 'order_id', 'tracking_number'
            ]

            # Regular expression pattern
            pattern = '|'.join(sensitive_keywords)

            # Check for sensitive information in the response body
            sensitive_info_found = False
            sensitive_info_matches = re.finditer(pattern, response.text, re.IGNORECASE)
            for match in sensitive_info_matches:
                sensitive_info_found = True
                context = response.text[max(0, match.start() - 50):min(len(response.text), match.end() + 50)]
                print(f"[!] Potential sensitive information found in the response body: {match.group()} (Context: {context})")

            # Check for sensitive information in HTML comments
            html_comments = soup.find_all(string=lambda text: isinstance(text, Comment))
            for comment in html_comments:
                sensitive_info_matches = re.finditer(pattern, comment, re.IGNORECASE)
                for match in sensitive_info_matches:
                    sensitive_info_found = True
                    context = comment[max(0, match.start() - 50):min(len(comment), match.end() + 50)]
                    print(f"[!] Potential sensitive information found in HTML comments: {match.group()} (Context: {context})")

            # Check for sensitive information in meta tags
            meta_tags = soup.find_all('meta')
            for meta in meta_tags:
                if meta.get('name') and meta.get('content'):
                    sensitive_info_matches = re.finditer(pattern, meta.get('content'), re.IGNORECASE)
                    for match in sensitive_info_matches:
                        sensitive_info_found = True
                        context = meta.get('content')[max(0, match.start() - 50):min(len(meta.get('content')), match.end() + 50)]
                        print(f"[!] Potential sensitive information found in meta tags: {match.group()} (Context: {context})")

            if sensitive_info_found:
                print("Vulnerability Metric: High")
                print("Recommendations:")
                print("1. Avoid exposing sensitive information in the HTML content, comments, or meta tags.")
                print("2. Use server-side validation to ensure sensitive information is not sent to the client.")
                print("3. Regularly scan your web application for information disclosure vulnerabilities.")
            else:
                print("[+] No sensitive information found. Low vulnerability detected.")
                print("Recommendations:")
                print("1. Continue to monitor and audit your web application for potential vulnerabilities.")
                print("2. Educate your development team about secure coding practices.")
        else:
            print(f"[!] Target website is unreachable (status code: {response.status_code}).")
            print("Vulnerability Metric: Medium")
            print("Recommendations:")
            print("1. Ensure the website is properly configured and accessible.")
            print("2. Check server logs for potential issues preventing access.")

    except requests.exceptions.Timeout:
        print("[!] Request timed out. The target website may be unresponsive.")
        print("Vulnerability Metric: Medium")
        print("Recommendations:")
        print("1. Check server performance and network issues.")
        print("2. Implement timeout handling to avoid potential denial of service attacks.")
    except Exception as e:
        print(f"[!] An error occurred: {e}")
        print("Vulnerability Metric: Medium")
        print("Recommendations:")
        print("1. Review the error logs to understand the cause.")
        print("2. Ensure proper error handling mechanisms are in place.")

def main():
    # Prompt user for target website URL
    target_url = input("Enter the target website URL: ").strip()
    # Check if the URL starts with 'http://' or 'https://'
    if not target_url.startswith("http://") and not target_url.startswith("https://"):
        target_url = "http://" + target_url

    # Test for Information Disclosure vulnerability
    check_information_disclosure(target_url)

if __name__ == "__main__":
    main()
