import requests
from bs4 import BeautifulSoup
import pyfiglet

ascii_banner = pyfiglet.figlet_format("HTML5 CORS TESTING")
print(ascii_banner)

def test_html5_cors(target_url):
    print(f"[*] Testing HTML5 Cross-Origin Messaging for: {target_url}")

    # Send a GET request to the target URL
    try:
        response = requests.get(target_url)
        if response.status_code != 200:
            print("[!] Error: Unable to access the target website.")
            return "medium"
    except requests.RequestException as e:
        print("[!] Error: Unable to connect to the target website.")
        print(e)
        return "medium"

    # Parse the HTML content
    soup = BeautifulSoup(response.text, 'html.parser')
    iframe_tags = soup.find_all('iframe')

    # Check if any iframe tags with 'sandbox' attribute found
    vulnerable = False
    for tag in iframe_tags:
        if tag.get('sandbox'):
            print("[!] Vulnerability Found: Cross-Origin Messaging may be enabled.")
            vulnerable = True
            break

    # Display vulnerability status and testing instructions
    if vulnerable:
        print("[*] Target is potentially vulnerable to HTML5 Cross-Origin Messaging.")
        print("[*] To test this vulnerability:")
        print("1. Create an HTML file with a message and host it on a different domain.")
        print("2. Include this HTML file in an iframe on the target website.")
        print("3. Use JavaScript to listen for messages from the iframe.")
        print("4. If you receive messages from the iframe, the website is vulnerable.")
        print("[!] Mitigations:")
        print("- Ensure all iframes have the 'sandbox' attribute with proper values to limit capabilities.")
        print("- Use the 'Content-Security-Policy' header to restrict the sources from which content can be loaded.")
        print("- Validate and sanitize messages received through cross-origin messaging.")
        return "high"
    else:
        print("[*] Target is not vulnerable to HTML5 Cross-Origin Messaging.")
        return "low"

def main():
    # Prompt user for target website URL
    target_url = input("Enter your target website URL: ").strip()
    # Check if the URL starts with 'http://' or 'https://'
    if not target_url.startswith("http://") and not target_url.startswith("https://"):
        target_url = "http://" + target_url

    # Test for HTML5 Cross-Origin Messaging vulnerability
    vulnerability_level = test_html5_cors(target_url)
    print(f"Vulnerability Level: {vulnerability_level.upper()}")

if __name__ == "__main__":
    main()
