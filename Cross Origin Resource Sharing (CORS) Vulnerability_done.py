import requests
import concurrent.futures

# Define payloads
COR1 = {'Origin': 'https://evil.com'}
COR2 = {'Origin': 'https://attacker.com'}
COR3 = {'Origin': 'null'}
COR4 = {'Origin': 'http://localhost'}
COR5 = {'Origin': 'https://example.com'}
COR6 = {'Origin': 'http://127.0.0.1'}
COR7 = {'Origin': 'https://trusted.com'}
COR8 = {'Origin': 'http://malicious.com'}
COR9 = {'Origin': 'https://phishing.com'}
COR10 = {'Origin': 'http://fake.com'}
COR11 = {'Origin': 'https://hackersite.com'}
COR12 = {'Origin': 'http://bad.com'}
COR13 = {'Origin': 'https://fraud.com'}
COR14 = {'Origin': 'http://scam.com'}
COR15 = {'Origin': 'https://malware.com'}
COR16 = {'Origin': 'http://unsafe.com'}
COR17 = {'Origin': 'https://suspicious.com'}
COR18 = {'Origin': 'http://untrusted.com'}
COR19 = {'Origin': 'https://dangerous.com'}
COR20 = {'Origin': 'http://blackhat.com'}
COR21 = {'Origin': 'https://intruder.com'}
COR22 = {'Origin': 'http://unauthorized.com'}
COR23 = {'Origin': 'https://malicious-actor.com'}
COR24 = {'Origin': 'http://malicious-site.com'}
COR25 = {'Origin': 'https://bad-actor.com'}
COR26 = {'Origin': 'http://evil-site.com'}
COR27 = {'Origin': 'https://malicious-user.com'}
COR28 = {'Origin': 'http://bad-user.com'}
COR29 = {'Origin': 'https://attacker-domain.com'}
COR30 = {'Origin': 'http://fake-site.com'}
COR31 = {'Origin': 'https://malicious-domain.com'}
COR32 = {'Origin': 'http://fake-domain.com'}
COR33 = {'Origin': 'https://hacker-domain.com'}
COR34 = {'Origin': 'http://phishing-domain.com'}
COR35 = {'Origin': 'https://fake-domain.com'}
COR36 = {'Origin': 'http://unsafe-domain.com'}
COR37 = {'Origin': 'https://unsafe-domain.com'}
COR38 = {'Origin': 'http://untrusted-domain.com'}
COR39 = {'Origin': 'https://untrusted-domain.com'}
COR40 = {'Origin': 'http://scam-domain.com'}

# Payloads list
payloads = [COR1, COR2, COR3, COR4, COR5, COR6, COR7, COR8, COR9, COR10, 
            COR11, COR12, COR13, COR14, COR15, COR16, COR17, COR18, COR19, COR20,
            COR21, COR22, COR23, COR24, COR25, COR26, COR27, COR28, COR29, COR30,
            COR31, COR32, COR33, COR34, COR35, COR36, COR37, COR38, COR39, COR40]

def test_cors_vulnerability(target_url):
    print("### Testing CORS Vulnerability for:", target_url)

    # Send a preflight request to check CORS headers
    print("Sending preflight CORS request...")
    preflight_response = requests.options(target_url)
    print("Preflight request response headers:")
    print(preflight_response.headers)

    # Check if CORS headers are present and misconfigured
    if 'Access-Control-Allow-Origin' in preflight_response.headers:
        print("Access-Control-Allow-Origin header is present!")
        print("CORS vulnerability might be present!")
        print("Testing further for misconfiguration...")

        # Test additional misconfigurations concurrently
        with concurrent.futures.ThreadPoolExecutor() as executor:
            futures = [executor.submit(test_additional_cors_misconfigurations, target_url, payload, idx + 1) for idx, payload in enumerate(payloads)]
            for future in concurrent.futures.as_completed(futures):
                payload_info = future.result()
                if payload_info:
                    return payload_info
    else:
        print("Access-Control-Allow-Origin header is not present")
        print("No CORS vulnerability detected")

def test_additional_cors_misconfigurations(target_url, headers, idx):
    # Attempt to bypass any protection systems
    print(f"Attempting to bypass protection systems with payload COR{idx}...")
    bypass_response = requests.get(target_url, headers=headers)
    print(f"Bypass attempt response for COR{idx}:")
    print(bypass_response.text)

    # Check if bypass attempt was successful
    if bypass_response.status_code == 200:
        metric = "high" if "evil" in headers['Origin'] else "medium" if "malicious" in headers['Origin'] else "low"
        print(f"Bypass attempt successful for COR{idx}! Metric: {metric}")
        return {'payload': headers['Origin'], 'variable_name': f'COR{idx}', 'metric': metric}
    else:
        print(f"Bypass attempt unsuccessful for COR{idx}")
        return None

def main():
    target_url = input("Enter your target website URL: ")
    successful_payload = test_cors_vulnerability(target_url)
    if successful_payload:
        print(f"Successfully injected payload: {successful_payload['payload']}")
        print(f"Variable name: {successful_payload['variable_name']}")
        print(f"Vulnerability metric: {successful_payload['metric']}")
    else:
        print("No payloads successfully injected.")

if __name__ == "__main__":
    main()
