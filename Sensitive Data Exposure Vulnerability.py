import requests
from concurrent.futures import ThreadPoolExecutor
from urllib.parse import urljoin
import pyfiglet

ascii_banner = pyfiglet.figlet_format("SENSITIVE DATA EXPOSURE")
print(ascii_banner)

def fetch_url(url):
    try:
        response = requests.get(url, allow_redirects=True)
        response.raise_for_status()
        return response
    except requests.exceptions.RequestException as e:
        return None, e

def test_sensitive_data_exposure(url):
    try:
        responses = []
        with ThreadPoolExecutor(max_workers=10) as executor:
            urls_to_fetch = [url, urljoin(url, '/login'), urljoin(url, '/admin')]
            futures = [executor.submit(fetch_url, url) for url in urls_to_fetch]
            for future in futures:
                response, error = future.result()
                if error:
                    print(f"Error fetching {response.url}: {error}")
                else:
                    responses.append(response)

        # Define common sensitive data keywords
        sensitive_data_keywords = [
            'password', 'credit card', 'social security number', 'ssn', 'pii',
            'username', 'email', 'phone number', 'account number', 'address',
            'passport', 'driver\'s license', 'date of birth', 'mother\'s maiden name',
            'bank account', 'routing number', 'tax identification number', 'TIN',
            'health insurance', 'medical record', 'financial account', 'credit score',
            'financial information', 'security question', 'security code', 'pin',
            'authentication code', 'biometric data', 'fingerprints', 'iris scan',
            'facial recognition', 'personal identification number', 'PIN', 'PIN code',
            'access code', 'banking credentials', 'login credentials', 'credentials',
            'social media account', 'login information', 'credit report', 'CVV',
            'CVV code', 'expiration date', 'mother\'s maiden name', 'mothers maiden name',
            'private key', 'public key', 'encryption key', 'API key', 'API token',
            'access token', 'refresh token', 'session token', 'bearer token',
            'authorization code', 'security certificate', 'SSL certificate', 'TLS certificate',
            'server certificate', 'client certificate', 'digital certificate', 'identity document',
            'identity card', 'ID card', 'passport number', 'employee ID', 'employee number',
            'government ID', 'national ID', 'tax ID', 'personal data', 'personal information',
            'confidential information', 'private information', 'sensitive information',
            'restricted information', 'proprietary information', 'trade secret', 'classified information'
        ]

        # Check for sensitive data in response content
        sensitive_data_found = False
        for response in responses:
            if not response:
                continue
            content_type = response.headers.get('Content-Type', '')
            if 'text/html' not in content_type:
                print(f"Skipping non-HTML content: {response.url}")
                continue
            
            for keyword in sensitive_data_keywords:
                if keyword.lower() in response.text.lower():
                    print(f"Potential sensitive data exposed at {response.url}: {keyword}")
                    sensitive_data_found = True
                    break
        
        if not sensitive_data_found:
            print("No sensitive data exposed.")
    except Exception as e:
        print(f"Error: {e}")

def main():
    print("SENSITIVE DATA EXPOSURE VULNERABILITY TESTER")
    print("This program tests a given website for potential sensitive data exposure vulnerabilities.")
    website_url = input("Enter the URL of the website to test:")
    print(f"Evaluating {website_url} for sensitive data exposure vulnerabilities...")
    if website_url.startswith(("http://", "https://")):
        test_sensitive_data_exposure(website_url)
    else:
        print("Invalid URL. Please include the protocol (http:// or https://)")

if __name__ == "__main__":
    main()
