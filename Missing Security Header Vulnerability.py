import requests
import concurrent.futures
import pyfiglet

ascii_banner = pyfiglet.figlet_format("MISSING SECURITY HEADERS")
print(ascii_banner)

# List of security headers to check
security_headers = [
    'X-Content-Type-Options', 
    'X-Frame-Options', 
    'X-XSS-Protection', 
    'Content-Security-Policy',
    'Strict-Transport-Security', 
    'Referrer-Policy', 
    'Feature-Policy', 
    'Expect-CT'
]

# Function to test security headers
def check_security_headers(url):
    results = {'url': url, 'missing_headers': []}
    
    try:
        response = requests.get(url, timeout=5)
        
        if response.status_code == 200:
            print(f"Testing {url}...")
            for header in security_headers:
                if header not in response.headers:
                    results['missing_headers'].append(header)
            return results
        else:
            print(f"Failed to retrieve {url}: Status code {response.status_code}")
            return None
    
    except Exception as e:
        print(f"Error while testing {url}: {e}")
        return None

# Function to print security header check results
def print_security_results(results):
    if results:
        print("\n" + "=" * 50)
        print(f"Results for {results['url']}:\n")
        if results['missing_headers']:
            print("Missing Security Headers:")
            for header in results['missing_headers']:
                print(f"- {header}")
            print("\nVulnerability: High")
            print("This website is vulnerable to various attacks such as clickjacking and XSS.")
        else:
            print("All Security Headers Found!")
            print("This website is protected against common security vulnerabilities.")
        print("=" * 50 + "\n")

if __name__ == "__main__":
    target_url = input("Enter the target website URL: ")
    
    # Send 5 concurrent requests
    with concurrent.futures.ThreadPoolExecutor() as executor:
        future_results = [executor.submit(check_security_headers, target_url) for _ in range(5)]
        
        for future in concurrent.futures.as_completed(future_results):
            print_security_results(future.result())
